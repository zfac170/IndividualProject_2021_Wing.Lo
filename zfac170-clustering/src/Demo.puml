@startuml
class ScoringMatrix{
    -matrix ï¼š double[][]
    -nucleotides : Map<Character, Integer>

    +ScoringMatrix(map : Map<Character, Integer>, matrix)
    +score(a: char, b: char): double
}

class MyScoringMatrix extends ScoringMatrix{
    -matrix : double[][]
    -map : Map<Character, Integer>

    +MyScoringMatrix()
}

class SequenceData{
    -seq_Id : String
    -seq_String : String
    -seq_Desc : String
    -SequenceData()

    +SequenceData(SequenceData seq)
    +SequenceData(seq_Id, seq_String, seq_Desc)
}

class SequenceDataUtil{
    +parseSequenceData(fileName : String) : Map<String, String> throws IOException
    +SequenceFileFormat setSeqFormat(fileName : String)
}

enum SequenceFileFormat{
    FASTA
    FASTAQ
    CSV
    GENBANK
    EMBL
    UNKNOWN
}

SequenceFileFormat <.. SequenceDataUtil

abstract class Linkage{
    #distance : Distance
    +Linkage() : #distance
    +void setDistance()
    +abstract clusterDistance(List<Integer> cluster1, List<Integer> cluster2): double
}

class SingleLinkage extends Linkage{
    +SingleLinkage()
    +clusterDistance(List<Integer> cluster1, List<Integer> cluster2): double
}

class GroupAvgLinkage extends Linkage{
    +GroupAvgLinkage()
    +clusterDistance(List<Integer> cluster1, List<Integer> cluster2): double
}

class CompleteLinkage extends Linkage{
    +CompleteLinkage()
    +clusterDistance(List<Integer> cluster1, List<Integer> cluster2): double
}

abstract class HierarchicalClustering implements Linkage{
    #Linkage : Linkage
    +HierarchicalClustering(linkage : Linkage)
    +abstract BinaryTree fit(distance : Distance, clusters : List<List<Integer>> )
}
@enduml

